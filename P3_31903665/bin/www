#!/usr/bin/env node
'use strict';

const app = require('../app'); // <-- correcto: sube un nivel para encontrar app.js
const debug = require('debug')('p3-31903665:server');
const http = require('http');
const db = require('../models'); // Para cerrar sequelize en shutdown

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000'); // <-- Render usa process.env.PORT
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Graceful shutdown: cerrar servidor y conexión a la BD
process.on('SIGTERM', () => {
  console.log('SIGTERM recibido: cerrando servidor...');
  server.close(async () => {
    try {
      if (db && db.sequelize) await db.sequelize.close();
      console.log('Conexión a la BD cerrada. Saliendo.');
      process.exit(0);
    } catch (err) {
      console.error('Error cerrando BD:', err);
      process.exit(1);
    }
  });
});

function normalizePort(val) {
  const p = parseInt(val, 10);
  if (isNaN(p)) return val;
  if (p >= 0) return p;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requiere privilegios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' ya está en uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Servidor escuchando en ' + bind);
}
